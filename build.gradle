buildscript {
    repositories {
        maven { url 'file:///usr/share/maven-repo' }
        jcenter()
    }
    dependencies {
        // 2.2.2 is the version that is included in Debian/stretch
        classpath 'com.android.tools.build:gradle:2.2.2'
    }
}

apply plugin: 'com.android.library'

def stdout = new ByteArrayOutputStream()
exec {
    commandLine 'git', 'describe', '--tags', '--always'
    standardOutput = stdout
}
def versionName = stdout.toString().trim()

allprojects {
    setVersion versionName
    setGroup 'info.guardianproject.panic'
}

android {
    // these are the versions that are included in Debian/stretch
    compileSdkVersion 23
    buildToolsVersion '24.0.0'

    sourceSets {
        main {
            manifest.srcFile 'AndroidManifest.xml'
            java.srcDirs = ['src']
            resources.srcDirs = ['src']
            aidl.srcDirs = ['src']
            renderscript.srcDirs = ['src']
            res.srcDirs = ['res']
            assets.srcDirs = ['assets']
        }
    }

    lintOptions {
        htmlReport true
        xmlReport false
        textReport false
    }
}

android.libraryVariants.all { variant ->
    def name = variant.buildType.name
    if (name.equals(com.android.builder.core.BuilderConstants.DEBUG)) {
        return; // Skip debug builds.
    }
    def task = project.tasks.create "jar${name.capitalize()}", Jar
    task.dependsOn variant.javaCompile, sourcesJar, javadocJar, createPom
    task.from variant.javaCompile.destinationDir
    task.exclude('info/guardianproject/**/BuildConfig.**')
}

task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'
}

task javadoc(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    classpath += configurations.compile
    options.addStringOption('notimestamp')
    failOnError false
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives javadocJar
    archives sourcesJar
}

apply plugin: 'maven'

task createPom << {
    pom {
        project {
            name 'PanicKit'
            artifactId 'panic'
            inceptionYear '2015'
            url "https://github.com/guardianproject/PanicKit"
            description "PanicKit is a collection of tools for letting panic trigger and panic receiver apps safely and easily connect to each other. The trigger apps are the part that the user will actual engage when in a panic situation. The receiver apps receive the trigger signal from the trigger apps when the user has initiated the panic response. The connections between trigger and receiver can be strictly enforced based on Package Name and APK signing key."
            issueManagement {
                system 'GitHub'
                url 'https://github.com/guardianproject/PanicKit/issues'
            }
            mailingLists {
                mailingList {
                    name 'Guardian Project Dev Mailing List'
                    subscribe 'https://lists.mayfirst.org/mailman/listinfo/guardian-dev'
                    archive 'http://lists.mayfirst.org/pipermail/guardian-dev/'
                }
            }
            licenses {
                license {
                    name 'GNU Lesser General Public License, version 2.1 or newer (LGPLv2.1+)'
                    url 'https://www.gnu.org/licenses/old-licenses/lgpl-2.1.html'
                    distribution 'repo'
                }
            }
            scm {
                connection 'scm:https://github.com/guardianproject/PanicKit.git'
                developerConnection 'scm:git@github.com:guardianproject/PanicKit.git'
                url 'scm:https://github.com/guardianproject/PanicKit'
            }
        }
    }.writeTo(project.getBuildDir().toString() + "/libs/" + project.name + "-" + project.version + ".pom")
}
